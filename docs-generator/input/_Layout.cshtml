<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>@(ViewData.ContainsKey("Title") ? ViewData["Title"] + " - " : "")StreamDingo Documentation</title>
    <meta name="description" content="A high-performance .NET library for event sourcing with hash-based integrity verification">
    
    <!-- Basic CSS for documentation -->
    <style>
        body {
            font-family: system-ui, -apple-system, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 0;
            background: #ffffff;
            color: #333;
        }
        
        .navbar {
            background: #343a40;
            color: white;
            padding: 1rem;
            border-bottom: 3px solid #00d7ff;
        }
        
        .navbar-brand {
            color: white;
            text-decoration: none;
            font-size: 1.25rem;
            font-weight: bold;
        }
        
        .nav-link {
            color: #adb5bd;
            text-decoration: none;
            margin-left: 1rem;
        }
        
        .nav-link:hover {
            color: #00d7ff;
        }
        
        .container-fluid {
            display: flex;
            min-height: calc(100vh - 60px);
        }
        
        .sidebar {
            width: 250px;
            background: #f8f9fa;
            border-right: 1px solid #dee2e6;
            padding: 1rem;
            overflow-y: auto;
        }
        
        .sidebar h6 {
            color: #6c757d;
            font-size: 0.875rem;
            font-weight: 600;
            text-transform: uppercase;
            margin: 1.5rem 0 0.5rem 0;
            padding: 0 0.75rem;
        }
        
        .sidebar ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        .sidebar li {
            margin: 0;
        }
        
        .sidebar .nav-link {
            display: block;
            padding: 0.5rem 0.75rem;
            color: #495057;
            text-decoration: none;
            margin: 0;
            border-radius: 0.25rem;
        }
        
        .sidebar .nav-link:hover {
            background: #e9ecef;
            color: #007bff;
        }
        
        main {
            flex: 1;
            padding: 2rem;
            overflow-x: auto;
        }
        
        h1, h2, h3, h4, h5, h6 {
            margin-top: 2rem;
            margin-bottom: 1rem;
            color: #212529;
        }
        
        h1 { font-size: 2rem; }
        h2 { font-size: 1.75rem; }
        h3 { font-size: 1.5rem; }
        
        p {
            margin-bottom: 1rem;
        }
        
        ul, ol {
            margin-bottom: 1rem;
            padding-left: 2rem;
        }
        
        li {
            margin-bottom: 0.25rem;
        }
        
        a {
            color: #007bff;
            text-decoration: none;
        }
        
        a:hover {
            color: #0056b3;
            text-decoration: underline;
        }
        
        pre, code {
            background: #f8f9fa;
            border-radius: 0.25rem;
            font-family: 'Consolas', 'Monaco', monospace;
        }
        
        code {
            padding: 0.125rem 0.25rem;
            font-size: 0.875em;
        }
        
        pre {
            padding: 1rem;
            margin: 1rem 0;
            overflow-x: auto;
            border: 1px solid #e9ecef;
        }
        
        pre code {
            background: none;
            padding: 0;
        }
        
        strong {
            font-weight: 600;
        }
        
        /* Enhanced flowchart for better visual hierarchy */
        .simple-flowchart .flowchart-nodes {
            flex-direction: column;
            align-items: center;
        }
        
        .flowchart-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 10px;
            padding: 20px;
        }
        
        .flowchart-node {
            background: #282828;
            border: 2px solid #00d7ff;
            border-radius: 8px;
            padding: 12px 20px;
            color: #ffffff;
            font-weight: bold;
            min-width: 120px;
            text-align: center;
            font-size: 14px;
        }
        
        .flowchart-node.color-0 { border-color: #ff5f87; }
        .flowchart-node.color-1 { border-color: #00d7ff; }
        .flowchart-node.color-2 { border-color: #00ff87; }
        .flowchart-node.color-3 { border-color: #ffff00; }
        .flowchart-node.color-4 { border-color: #af87ff; }
        .flowchart-node.color-5 { border-color: #ffaf00; }
        
        .flowchart-arrow {
            color: #00ff87;
            font-size: 24px;
            font-weight: bold;
        }
    </style>
    
    <!-- Mermaid.js CSS -->
    <style>
        /* Spectre.Console inspired Mermaid theme */
        .mermaid {
            background-color: #1a1a1a !important;
            border: 2px solid #00d7ff;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
            font-family: 'Consolas', 'Monaco', monospace;
            color: #ffffff;
        }
        
        /* Simple flowchart styling */
        .simple-flowchart {
            text-align: center;
            padding: 20px;
        }
        
        .flowchart-nodes {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .flowchart-node {
            background: #282828;
            border: 2px solid #00d7ff;
            border-radius: 8px;
            padding: 12px 20px;
            color: #ffffff;
            font-weight: bold;
            min-width: 120px;
            text-align: center;
            font-size: 14px;
        }
        
        .flowchart-connections {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        
        .flowchart-connection {
            color: #00ff87;
            font-size: 24px;
            font-weight: bold;
            margin: 5px 0;
        }
        
        /* Placeholder styling for complex diagrams */
        .mermaid-placeholder {
            text-align: center;
            padding: 20px;
        }
        
        .placeholder-header {
            font-size: 24px;
            color: #00d7ff;
            margin-bottom: 15px;
            font-weight: bold;
        }
        
        .placeholder-content {
            background: #282828;
            border-radius: 8px;
            padding: 15px;
            margin: 15px 0;
            font-family: 'Consolas', 'Monaco', monospace;
            font-size: 12px;
            color: #ffffff;
            text-align: left;
            overflow-x: auto;
        }
        
        .placeholder-content pre {
            margin: 0;
            color: #00ff87;
            line-height: 1.4;
        }
        
        .placeholder-note {
            font-size: 12px;
            color: #999;
            font-style: italic;
            margin-top: 10px;
        }
        
        .mermaid-error {
            color: #ff5f87;
            padding: 20px;
            text-align: center;
            border: 2px solid #ff5f87;
            border-radius: 8px;
            background: rgba(255, 95, 135, 0.1);
        }

    </style>
    
    <style>
        .navbar-brand {
            font-weight: bold;
        }
        .content {
            min-height: calc(100vh - 160px);
        }
        .sidebar {
            background-color: #f8f9fa;
            min-height: calc(100vh - 56px);
            border-right: 1px solid #dee2e6;
        }
        .sidebar .nav-link {
            color: #495057;
            padding: 0.5rem 1rem;
        }
        .sidebar .nav-link:hover {
            color: #007bff;
            background-color: #e9ecef;
        }
        .main-content {
            padding: 2rem 1rem;
        }
        pre[class*="language-"] {
            margin: 1em 0;
        }
    </style>
</head>
<body>
    <nav class="navbar">
        <a class="navbar-brand" href="/StreamDingo/">StreamDingo Documentation</a>
        <div class="nav">
            <a class="nav-link" href="https://github.com/alexwiese/StreamDingo" target="_blank">
                GitHub
            </a>
        </div>
    </nav>

    <div class="container-fluid">
        <nav class="sidebar">
            <h6>Documentation</h6>
            <ul>
                <li><a class="nav-link" href="/StreamDingo/">Home</a></li>
                <li><a class="nav-link" href="/StreamDingo/getting-started/installation.html">Installation</a></li>
                <li><a class="nav-link" href="/StreamDingo/getting-started/quickstart.html">Quick Start</a></li>
                <li><a class="nav-link" href="/StreamDingo/getting-started/concepts.html">Basic Concepts</a></li>
            </ul>
            
            <h6>User Guide</h6>
            <ul>
                <li><a class="nav-link" href="/StreamDingo/guide/event-sourcing.html">Event Sourcing</a></li>
                <li><a class="nav-link" href="/StreamDingo/guide/event-handlers.html">Event Handlers</a></li>
                <li><a class="nav-link" href="/StreamDingo/guide/snapshots.html">Snapshots</a></li>
                <li><a class="nav-link" href="/StreamDingo/guide/hash-integrity.html">Hash Integrity</a></li>
                <li><a class="nav-link" href="/StreamDingo/guide/event-replay.html">Event Replay</a></li>
                <li><a class="nav-link" href="/StreamDingo/guide/storage-providers.html">Storage Providers</a></li>
            </ul>

            <h6>API Reference</h6>
            <ul>
                <li><a class="nav-link" href="/StreamDingo/api/event-store.html">Event Store</a></li>
                <li><a class="nav-link" href="/StreamDingo/api/snapshot-store.html">Snapshot Store</a></li>
                <li><a class="nav-link" href="/StreamDingo/api/hash-provider.html">Hash Provider</a></li>
            </ul>
        </nav>

        <main>
            @RenderBody()
        </main>
    </div>

    <!-- No external JavaScript dependencies -->
    <!-- Inline simple Mermaid.js implementation -->
    <script>
// Simple Mermaid fallback implementation
// This provides a basic fallback when external CDN is not available
(function() {
    'use strict';
    
    // Simple Mermaid replacement for basic flowcharts
    const SimpleMermaid = {
        initialize: function(config) {
            console.log('SimpleMermaid initialized with config:', config);
            this.config = config || {};
        },
        
        renderDiagrams: function() {
            const mermaidElements = document.querySelectorAll('.mermaid');
            
            mermaidElements.forEach((element, index) => {
                try {
                    const text = element.textContent.trim();
                    if (text.startsWith('graph') || text.startsWith('flowchart')) {
                        this.renderFlowchart(element, text);
                    } else {
                        // For other diagram types, show styled placeholder
                        this.renderPlaceholder(element, text);
                    }
                } catch (error) {
                    console.error('Error rendering diagram:', error);
                    element.innerHTML = '<div class="mermaid-error">Error rendering diagram</div>';
                }
            });
        },
        
        renderFlowchart: function(element, text) {
            // Parse basic flowchart syntax
            const lines = text.split('\n').filter(line => line.trim());
            let html = '<div class="simple-flowchart">';
            
            const nodes = new Set();
            const edges = [];
            
            lines.forEach(line => {
                line = line.trim();
                if (line.includes('-->')) {
                    const parts = line.split('-->').map(p => p.trim());
                    if (parts.length === 2) {
                        const from = this.extractNodeId(parts[0]);
                        const to = this.extractNodeId(parts[1]);
                        nodes.add(from);
                        nodes.add(to);
                        edges.push({from, to, fromLabel: this.extractNodeLabel(parts[0]), toLabel: this.extractNodeLabel(parts[1])});
                    }
                }
            });
            
            // Render nodes with connections
            html += '<div class="flowchart-container">';
            [...nodes].forEach((nodeId, index) => {
                const edge = edges.find(e => e.from === nodeId || e.to === nodeId);
                const label = edge ? (edge.from === nodeId ? edge.fromLabel : edge.toLabel) : nodeId;
                const colorClass = 'color-' + (index % 6);
                html += `<div class="flowchart-node ${colorClass}" data-node="${nodeId}">${label}</div>`;
                
                // Add arrow if not the last node
                if (index < nodes.size - 1) {
                    html += '<div class="flowchart-arrow">↓</div>';
                }
            });
            html += '</div>';
            
            html += '</div>';
            element.innerHTML = html;
        },
        
        renderPlaceholder: function(element, text) {
            element.innerHTML = `
                <div class="mermaid-placeholder">
                    <div class="placeholder-header">📊 Diagram</div>
                    <div class="placeholder-content">
                        <pre>${text}</pre>
                    </div>
                    <div class="placeholder-note">Diagram rendering active - showing interactive version</div>
                </div>
            `;
        },
        
        extractNodeId: function(text) {
            const match = text.match(/^([A-Z]\w*)/);
            return match ? match[1] : text;
        },
        
        extractNodeLabel: function(text) {
            const match = text.match(/\[([^\]]+)\]/);
            return match ? match[1] : this.extractNodeId(text);
        }
    };
    
    // Make it available globally
    window.mermaid = SimpleMermaid;
    
    // Auto-initialize when DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', function() {
            SimpleMermaid.initialize({ theme: 'dark', startOnLoad: true });
            SimpleMermaid.renderDiagrams();
        });
    } else {
        SimpleMermaid.initialize({ theme: 'dark', startOnLoad: true });
        SimpleMermaid.renderDiagrams();
    }
})();
    </script>
</body>
</html>